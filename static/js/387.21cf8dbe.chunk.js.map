{"version":3,"file":"static/js/387.21cf8dbe.chunk.js","mappings":"8RAEaA,EAAQC,EAAAA,GAAAA,IAAD,4GAMPC,EAAWD,EAAAA,GAAAA,GAAD,iFAKVE,EAASF,EAAAA,GAAAA,GAAD,8GAORG,EAAaH,EAAAA,GAAAA,GAAD,oGAKZI,EAASJ,EAAAA,GAAAA,IAAD,6DAIRK,EAASL,EAAAA,GAAAA,GAAD,6CAGRM,EAAWN,EAAAA,GAAAA,EAAD,oM,SCmCvB,EAtDa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAeP,GAFxB,gBAENG,EAFM,EAENA,KACRC,EAAQD,GAHM,gDAKdK,QAAQC,IAAR,MALc,yDAAH,qDASfH,GACD,GAAE,CAACN,KAGF,UAACR,EAAD,YACE,SAACE,EAAD,UAAY,SAETS,EAAKO,QACN,SAACf,EAAD,UACGQ,EAAKQ,KAAI,SAAAC,GAAK,OACb,UAAChB,EAAD,CAAciB,UAAU,YAAxB,UAEKD,EAAME,cACP,gBACEC,IAAG,yCAAoCH,EAAME,cAC7CE,IAAG,UAAKJ,EAAMK,KAAX,eAGL,gBACEF,IAAG,oDACHC,IAAG,UAAKJ,EAAMK,KAAX,eAIL,UAACpB,EAAD,YACA,SAACC,EAAD,UAAWc,EAAMK,QACjB,yBAAG,cAAYL,EAAMM,kBAhBgBN,EAAMO,GADlC,OAuBjB,SAACpB,EAAD,UAAY,wDAMnB,C,mMC/DKqB,EAAU,6BACVC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,kEACsCF,IAF/B,uBACtBG,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qDAQhBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACgBC,EADhB,iCACgDK,EADhD,gCADO,uBACtBF,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,sDAQhBG,EAAc,mCAAG,WAAM3B,GAAN,yFACLuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCpB,EADD,oBACoBqB,EADpB,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdjB,EAAc,mCAAG,WAAMP,GAAN,yFACLuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCpB,EADD,4BAC4BqB,EAD5B,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdI,EAAiB,mCAAG,WAAM5B,GAAN,yFACRuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCpB,EADD,6BAC6BqB,EAD7B,2BADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper=styled.div` margin-top: 30px;\npadding-right: 80px;\npadding-left: 80px;\npadding-bottom: 40px;\n`;\n\nexport const CastHeader=styled.h3` font-size: 25px;\nfont-weight: 500;\ntext-align: center;\n`;\n\nexport const CastList=styled.ul` margin-top: 30px;\ndisplay: flex;\nalign-items: center;\ngap: 40px;\nflex-wrap: wrap;\n`;\n\nexport const CastListItem=styled.li` width: calc((100% - 4 * 40px) / 5);\nheight: 400px;\nword-wrap: break-word;\n`;\n\nexport const CastInfo=styled.div` margin-top: 20px;\nmax-width: 220px;\n`;\n\nexport const CastName=styled.h3` margin-bottom: 10px;\n`;\n\nexport const NoCastText=styled.p` margin: 30px auto 0 auto;\ntext-align: center;\npadding: 20px;\nbackground-color: #f8f8f8;\nborder-radius: 5px;\nbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\nmax-width: 500px;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; \nimport { fetchMovieCast } from '../../services/api'; \nimport {\n  CastHeader,\n  CastInfo,\n  CastList,\n  CastListItem,\n  CastName,\n  NoCastText,\n  Wrapper,\n} from './Cast.styled'; \n\nconst Cast = () => {\n  const { movieId } = useParams(); \n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <CastHeader>Cast</CastHeader> \n\n        {cast.length ? (\n        <CastList>\n          {cast.map(actor => (\n            <CastListItem className=\"cast-card\" key={actor.id}>\n\n                {actor.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                  alt={`${actor.name} profile`}\n                />\n              ) : (\n                <img\n                  src={`https://via.placeholder.com/200x300?text=No+Image`}\n                  alt={`${actor.name} profile`}\n                />\n              )}\n\n                <CastInfo>\n                <CastName>{actor.name}</CastName>\n                <p>Character: {actor.character}</p>\n              </CastInfo>\n            </CastListItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoCastText>\n          We don't have any information about the cast yet.\n        </NoCastText>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '40800775edfb8bb526c23646959eacdc'; // мій ключ\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await axios.get(\n    `${baseURL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};"],"names":["Wrapper","styled","CastHeader","CastList","CastListItem","CastInfo","CastName","NoCastText","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","fetchMovieCast","console","log","length","map","actor","className","profile_path","src","alt","name","character","id","baseURL","API_KEY","fetchTrendMovies","axios","data","fetchMovieByName","query","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}